#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal
# cmd + lshift - i : open -a /Applications/iTerm.app

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

# Changing Window Focus

# changing screen focus
lalt - s : yabai -m display --focus west
lalt - g : yabai -m display --focus east

# changing window focus within space
lalt - j: yabai -m window --focus south
lalt - k: yabai -m window --focus north
lalt - h: yabai -m window --focus west
lalt - l: yabai -m window --focus east

# Modifying the Layout

# rotate layout clockwise
lshift + lalt - r: yabai -m space --rotate 270

# flip along y-axis
lshift + lalt - y: yabai -m space --mirror y-axis

# flip along x-axis
lshift + lalt - x: yabai -m space --mirror x-axis

# toggle window float
lshift + lalt - t: yabai -m window --toggle float --grid 4:4:1:1:2:2

# Modifying window size

# maximize window
meh - f: yabai -m window --toggle zoom-fullscreen

# balance out tree of windows (resize to occupy same area)
lshift + lalt - b: yabai -m space --balance

# Moving Windows Around

# swap windows
lshift + lalt - j: yabai -m window --swap south
lshift + lalt - k: yabai -m window --swap north
lshift + lalt - h: yabai -m window --swap west
lshift + lalt - l: yabai -m window --swap east

# move window and split
lctrl + lalt - j: yabai -m window --warp south
lctrl + lalt - k: yabai -m window --warp north
lctrl + lalt - h: yabai -m window --warp west
lctrl + lalt - l: yabai -m window --warp east


# resizing window
lshift + lalt - l: yabai -m window --resize right:20:0; yabai -m window --resize left:20:0
lshift + lalt - h: yabai -m window --resize left:-20:0; yabai -m window --resize right:-20:0
lshift + lalt - j: yabai -m window --resize bottom:0:20; yabai -m window --resize top:0:20
lshift + lalt - k: yabai -m window --resize top:0:-20; yabai -m window --resize bottom:0:-20

# move window to display left or right
lshift + lalt - s: yabai -m window --display west; yabai -m display --focus west
lshift + lalt - g: yabai -m window --display east; yabai -m display --focus east

# move window to prev and next space
lshift + lalt - p: yabai -m space --move prev
lshift + lalt - n: yabai -m space --move next

# move window to space #
lshift + lalt - 1: yabai -m window --space 1
lshift + lalt - 2: yabai -m window --space 2
lshift + lalt - 3: yabai -m window --space 3
lshift + lalt - 4: yabai -m window --space 4
lshift + lalt - 5: yabai -m window --space 5
lshift + lalt - 6: yabai -m window --space 6
lshift + lalt - 7: yabai -m window --space 7
lshift + lalt - 8: yabai -m window --space 8

# start/stop Yabai
lctrl + lalt - r: echo "Restarting Yabai" && yabai --restart-service

